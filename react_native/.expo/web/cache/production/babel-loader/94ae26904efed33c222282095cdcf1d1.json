{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Checkbox from\"./Checkbox\";import CheckboxAndroid from\"./CheckboxAndroid\";import CheckboxIOS from\"./CheckboxIOS\";import Text from\"../Typography/Text\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var CheckboxItem=function CheckboxItem(_ref){var style=_ref.style,status=_ref.status,label=_ref.label,onPress=_ref.onPress,labelStyle=_ref.labelStyle,theme=_ref.theme,testID=_ref.testID,mode=_ref.mode,props=_objectWithoutProperties(_ref,[\"style\",\"status\",\"label\",\"onPress\",\"labelStyle\",\"theme\",\"testID\",\"mode\"]);var checkboxProps=_objectSpread(_objectSpread({},props),{},{status:status,theme:theme});var checkbox;if(mode==='android'){checkbox=React.createElement(CheckboxAndroid,checkboxProps);}else if(mode==='ios'){checkbox=React.createElement(CheckboxIOS,checkboxProps);}else{checkbox=React.createElement(Checkbox,checkboxProps);}return React.createElement(TouchableRipple,{onPress:onPress,testID:testID},React.createElement(View,{style:[styles.container,style],pointerEvents:\"none\"},React.createElement(Text,{style:[styles.label,{color:theme.colors.text},labelStyle]},label),checkbox));};CheckboxItem.displayName='Checkbox.Item';export default withTheme(CheckboxItem);var CheckboxItemWithTheme=withTheme(CheckboxItem);export{CheckboxItemWithTheme as CheckboxItem};var styles=StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{fontSize:16,flex:1}});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","props","checkboxProps","status","theme","mode","checkbox","testID","styles","color","text","withTheme","CheckboxItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize","flex"],"mappings":"o7BAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHAUA,MAAA,CAAA,QAAA,kBACA,MAAA,CAAA,eAAA,yBACA,MAAA,CAAA,WAAA,qBACA,MAAA,CAAA,IAAA,0BACA,MAAA,CAAA,eAAA,0CACA,OAAA,SAAA,0BAqEA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAUR,IAVS,CAAA,KAUT,MAVS,KAUT,CAVS,MAUT,MAVS,MAUT,CAVS,KAUT,MAVS,KAUT,CAVS,OAUT,MAVS,OAUT,CAVS,UAUT,MAVS,UAUT,CAVS,KAUT,MAVS,KAUT,CAVS,MAUT,MAVS,MAUT,CAVS,IAUT,MAVS,IAUT,CADRC,KACQ,0GACX,GAAMC,CAAAA,aAAa,gCAAG,KAAH,MAAeC,MAAZ,CAAYA,MAAf,CAAuBC,KAAAA,CAAAA,KAAvB,EAAnB,CACA,GAAA,CAAA,QAAA,CAEA,GAAIC,IAAI,GAAR,SAAA,CAAwB,CACtBC,QAAQ,CAAG,KAAA,CAAA,aAAA,CAAA,eAAA,CAAXA,aAAW,CAAXA,CADF,CAAA,IAEO,IAAID,IAAI,GAAR,KAAA,CAAoB,CACzBC,QAAQ,CAAG,KAAA,CAAA,aAAA,CAAA,WAAA,CAAXA,aAAW,CAAXA,CADK,CAAA,IAEA,CACLA,QAAQ,CAAG,KAAA,CAAA,aAAA,CAAA,QAAA,CAAXA,aAAW,CAAXA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,eAAA,CAAA,CAAiB,OAAO,CAAxB,OAAA,CAAmC,MAAM,CAAEC,MAA3C,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACC,MAAM,CAAP,SAAA,CAAb,KAAa,CAAb,CAAwC,aAAa,CAAC,MAAtD,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACA,MAAM,CAAP,KAAA,CAAe,CAAEC,KAAK,CAAEL,KAAK,CAALA,MAAAA,CAAaM,IAAtB,CAAf,CAAA,UAAA,CAAb,CAAA,CADF,KACE,CADF,CAFJ,QAEI,CADF,CADF,CAtBF,CAAA,CAkCAV,YAAY,CAAZA,WAAAA,CAAAA,eAAAA,CAEA,cAAeW,CAAAA,SAAS,CAAxB,YAAwB,CAAxB,CAGA,GAAMC,CAAAA,qBAAqB,CAAGD,SAAS,CAAvC,YAAuC,CAAvC,CAEA,OAASC,qBAAqB,GAA9B,CAAA,YAAA,EAEA,GAAMJ,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BK,SAAS,CAAE,CACTC,aAAa,CADJ,KAAA,CAETC,UAAU,CAFD,QAAA,CAGTC,cAAc,CAHL,eAAA,CAITC,eAAe,CAJN,CAAA,CAKTC,iBAAiB,CAAE,EALV,CADoB,CAQ/BC,KAAK,CAAE,CACLC,QAAQ,CADH,EAAA,CAELC,IAAI,CAAE,CAFD,CARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\n          {label}\n        </Text>\n        {checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
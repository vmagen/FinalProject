{"ast":null,"code":"import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import ToggleButtonGroup from\"./ToggleButtonGroup\";import ToggleButton from\"./ToggleButton\";var ToggleButtonRow=function ToggleButtonRow(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,children=_ref.children,style=_ref.style;var count=React.Children.count(children);return React.createElement(ToggleButtonGroup,{value:value,onValueChange:onValueChange},React.createElement(View,{style:[styles.row,style]},React.Children.map(children,function(child,i){if(child&&child.type===ToggleButton){return React.cloneElement(child,{style:[styles.button,i===0?styles.first:i===count-1?styles.last:styles.middle,child.props.style]});}return child;})));};ToggleButtonRow.displayName='ToggleButton.Row';var styles=StyleSheet.create({row:{flexDirection:'row'},button:{borderWidth:StyleSheet.hairlineWidth},first:{borderTopRightRadius:0,borderBottomRightRadius:0},middle:{borderRadius:0,borderLeftWidth:0},last:{borderLeftWidth:0,borderTopLeftRadius:0,borderBottomLeftRadius:0}});export default ToggleButtonRow;export{ToggleButtonRow};","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","style","count","React","onValueChange","styles","child","i","row","flexDirection","button","borderWidth","StyleSheet","hairlineWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderRadius","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"AAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHAEA,MAAA,CAAA,iBAAA,2BACA,MAAA,CAAA,YAAA,sBA+CA,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAsD,IAArD,CAAA,KAAqD,MAArD,KAAqD,CAArD,aAAqD,MAArD,aAAqD,CAArD,QAAqD,MAArD,QAAqD,CAAnBC,KAAmB,MAAnBA,KAAmB,CAC5E,GAAMC,CAAAA,KAAK,CAAGC,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,CAAmB,KAAK,CAAxB,KAAA,CAAiC,aAAa,CAAEC,aAAhD,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACC,MAAM,CAAP,GAAA,CAAA,KAAA,CAAb,CAAA,CACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,CAA6B,SAAA,KAAA,CAAA,CAAA,CAAc,CAE1C,GAAIC,KAAK,EAAIA,KAAK,CAALA,IAAAA,GAAb,YAAA,CAA0C,CAExC,MAAO,CAAA,KAAK,CAAL,YAAA,CAAA,KAAA,CAA0B,CAC/BL,KAAK,CAAE,CACLI,MAAM,CADD,MAAA,CAELE,CAAC,GAADA,CAAAA,CACIF,MAAM,CADVE,KAAAA,CAEIA,CAAC,GAAKL,KAAK,CAAXK,CAAAA,CACAF,MAAM,CADNE,IAAAA,CAEAF,MAAM,CANL,MAAA,CAQLC,KAAK,CAALA,KAAAA,CARK,KAAA,CADwB,CAA1B,CAAP,CAYD,CAED,MAAA,CAAA,KAAA,CArBR,CAGO,CADH,CADF,CADF,CAHF,CAAA,CA+BAN,eAAe,CAAfA,WAAAA,CAAAA,kBAAAA,CAEA,GAAMK,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BG,GAAG,CAAE,CACHC,aAAa,CAAE,KADZ,CAD0B,CAI/BC,MAAM,CAAE,CACNC,WAAW,CAAEC,UAAU,CAACC,aADlB,CAJuB,CAQ/BC,KAAK,CAAE,CACLC,oBAAoB,CADf,CAAA,CAELC,uBAAuB,CAAE,CAFpB,CARwB,CAa/BC,MAAM,CAAE,CACNC,YAAY,CADN,CAAA,CAENC,eAAe,CAAE,CAFX,CAbuB,CAkB/BC,IAAI,CAAE,CACJD,eAAe,CADX,CAAA,CAEJE,mBAAmB,CAFf,CAAA,CAGJC,sBAAsB,CAAE,CAHpB,CAlByB,CAAlB,CAAf,CAyBA,cAAA,CAAA,eAAA,CAGA,OAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-ignore\n          if (child && child.type === ToggleButton) {\n            // @ts-ignore\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-ignore\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"]},"metadata":{},"sourceType":"module"}
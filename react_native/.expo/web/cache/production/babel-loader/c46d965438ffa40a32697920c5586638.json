{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var CheckboxIOS=function CheckboxIOS(_ref){var status=_ref.status,disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,testID=_ref.testID,rest=_objectWithoutProperties(_ref,[\"status\",\"disabled\",\"onPress\",\"theme\",\"testID\"]);var checked=status==='checked';var indeterminate=status==='indeterminate';var checkedColor=disabled?theme.colors.disabled:rest.color||theme.colors.accent;var rippleColor;if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();}var icon=indeterminate?'minus':'check';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"checkbox\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(View,{style:{opacity:indeterminate||checked?1:0}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:icon,size:24,color:checkedColor,direction:\"ltr\"})));};CheckboxIOS.displayName='Checkbox.IOS';var styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default withTheme(CheckboxIOS);var CheckboxIOSWithTheme=withTheme(CheckboxIOS);export{CheckboxIOSWithTheme as CheckboxIOS};","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","rest","checked","status","indeterminate","checkedColor","disabled","theme","rippleColor","color","icon","styles","testID","opacity","container","borderRadius","padding","withTheme","CheckboxIOSWithTheme"],"mappings":"4WAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHAEA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,qBAAA,gCACA,MAAA,CAAA,eAAA,0CACA,OAAA,SAAA,0BA8CA,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAOP,IAPQ,CAAA,MAOR,MAPQ,MAOR,CAPQ,QAOR,MAPQ,QAOR,CAPQ,OAOR,MAPQ,OAOR,CAPQ,KAOR,MAPQ,KAOR,CAPQ,MAOR,MAPQ,MAOR,CADRC,IACQ,iFACX,GAAMC,CAAAA,OAAO,CAAGC,MAAM,GAAtB,SAAA,CACA,GAAMC,CAAAA,aAAa,CAAGD,MAAM,GAA5B,eAAA,CAEA,GAAME,CAAAA,YAAY,CAAGC,QAAQ,CACzBC,KAAK,CAALA,MAAAA,CADyB,QAAA,CAEzBN,IAAI,CAAJA,KAAAA,EAAcM,KAAK,CAALA,MAAAA,CAFlB,MAAA,CAIA,GAAA,CAAA,WAAA,CAEA,GAAA,QAAA,CAAc,CACZC,WAAW,CAAGC,KAAK,CAACF,KAAK,CAALA,MAAAA,CAANE,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdD,MAAcC,EAAdD,CADF,CAAA,IAEO,CACLA,WAAW,CAAGC,KAAK,CAALA,YAAK,CAALA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdD,MAAcC,EAAdD,CACD,CAED,GAAME,CAAAA,IAAI,CAAGN,aAAa,CAAA,OAAA,CAA1B,OAAA,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,eAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,UAAU,CAFZ,IAAA,CAGE,WAAW,CAHb,WAAA,CAIE,OAAO,CAJT,OAAA,CAKE,QAAQ,CALV,QAAA,CAME,mBAAmB,CAAEE,QAAQ,CAAG,CAAA,QAAA,CAAH,UAAG,CAAH,CAN/B,QAAA,CAOE,0BAA0B,CAP5B,QAAA,CAQE,iBAAiB,CARnB,UAAA,CASE,kBAAkB,CAAE,CAAEA,QAAF,CAAEA,QAAF,CAAYJ,OAAAA,CAAAA,OAAZ,CATtB,CAUE,uBAAuB,CAVzB,QAAA,CAWE,KAAK,CAAES,MAAM,CAXf,SAAA,CAYE,MAAM,CAAEC,MAZV,CAAA,CAAA,CAcE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAAEC,OAAO,CAAET,aAAa,EAAbA,OAAAA,CAAAA,CAAAA,CAA+B,CAA1C,CAAb,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,qBAAA,CAAA,CACE,gBAAgB,CADlB,KAAA,CAEE,IAAI,CAFN,IAAA,CAGE,IAAI,CAHN,EAAA,CAIE,KAAK,CAJP,YAAA,CAKE,SAAS,CAAC,KALZ,CAAA,CADF,CAdF,CADF,CAzBF,CAAA,CAqDAJ,WAAW,CAAXA,WAAAA,CAAAA,cAAAA,CAEA,GAAMW,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BG,SAAS,CAAE,CACTC,YAAY,CADH,EAAA,CAETC,OAAO,CAAE,CAFA,CADoB,CAAlB,CAAf,CAOA,cAAeC,CAAAA,SAAS,CAAxB,WAAwB,CAAxB,CAGA,GAAMC,CAAAA,oBAAoB,CAAGD,SAAS,CAAtC,WAAsC,CAAtC,CAEA,OAASC,oBAAoB,GAA7B,CAAA,WAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}
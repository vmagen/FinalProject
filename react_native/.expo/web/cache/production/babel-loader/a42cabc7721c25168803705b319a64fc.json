{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import color from'color';import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import Text from\"../Typography/Text\";import{withTheme}from\"../../core/theming\";var ListItem=function ListItem(_ref){var left=_ref.left,right=_ref.right,title=_ref.title,description=_ref.description,onPress=_ref.onPress,theme=_ref.theme,style=_ref.style,titleStyle=_ref.titleStyle,_ref$titleNumberOfLin=_ref.titleNumberOfLines,titleNumberOfLines=_ref$titleNumberOfLin===void 0?1:_ref$titleNumberOfLin,_ref$descriptionNumbe=_ref.descriptionNumberOfLines,descriptionNumberOfLines=_ref$descriptionNumbe===void 0?2:_ref$descriptionNumbe,titleEllipsizeMode=_ref.titleEllipsizeMode,descriptionEllipsizeMode=_ref.descriptionEllipsizeMode,descriptionStyle=_ref.descriptionStyle,rest=_objectWithoutProperties(_ref,[\"left\",\"right\",\"title\",\"description\",\"onPress\",\"theme\",\"style\",\"titleStyle\",\"titleNumberOfLines\",\"descriptionNumberOfLines\",\"titleEllipsizeMode\",\"descriptionEllipsizeMode\",\"descriptionStyle\"]);var renderDescription=function renderDescription(descriptionColor,description){return typeof description==='function'?description({selectable:false,ellipsizeMode:descriptionEllipsizeMode,color:descriptionColor,fontSize:styles.description.fontSize}):React.createElement(Text,{selectable:false,numberOfLines:descriptionNumberOfLines,ellipsizeMode:descriptionEllipsizeMode,style:[styles.description,{color:descriptionColor},descriptionStyle]},description);};var titleColor=color(theme.colors.text).alpha(0.87).rgb().string();var descriptionColor=color(theme.colors.text).alpha(0.54).rgb().string();return React.createElement(TouchableRipple,_extends({},rest,{style:[styles.container,style],onPress:onPress}),React.createElement(View,{style:styles.row},left?left({color:descriptionColor,style:description?styles.iconMarginLeft:_objectSpread(_objectSpread({},styles.iconMarginLeft),styles.marginVerticalNone)}):null,React.createElement(View,{style:[styles.item,styles.content]},React.createElement(Text,{selectable:false,ellipsizeMode:titleEllipsizeMode,numberOfLines:titleNumberOfLines,style:[styles.title,{color:titleColor},titleStyle]},title),description?renderDescription(descriptionColor,description):null),right?right({color:descriptionColor,style:description?styles.iconMarginRight:_objectSpread(_objectSpread({},styles.iconMarginRight),styles.marginVerticalNone)}):null));};ListItem.displayName='List.Item';var styles=StyleSheet.create({container:{padding:8},row:{flexDirection:'row'},title:{fontSize:16},description:{fontSize:14},marginVerticalNone:{marginVertical:0},iconMarginLeft:{marginLeft:0,marginRight:16},iconMarginRight:{marginRight:0},item:{marginVertical:6,paddingLeft:8},content:{flex:1,justifyContent:'center'}});export default withTheme(ListItem);","map":{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","titleNumberOfLines","descriptionNumberOfLines","rest","renderDescription","description","selectable","ellipsizeMode","color","fontSize","styles","descriptionColor","titleColor","theme","onPress","row","left","style","marginVerticalNone","right","container","padding","flexDirection","title","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","item","paddingLeft","content","flex","justifyContent","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          <Text\n            selectable={false}\n            ellipsizeMode={titleEllipsizeMode}\n            numberOfLines={titleNumberOfLines}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}
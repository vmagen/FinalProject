{"ast":null,"code":"import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{withTheme}from\"../../core/theming\";import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress}from\"./utils\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import RadioButton from\"./RadioButton\";import Text from\"../Typography/Text\";import RadioButtonAndroid from\"./RadioButtonAndroid\";import RadioButtonIOS from\"./RadioButtonIOS\";var RadioButtonItem=function RadioButtonItem(_ref){var value=_ref.value,label=_ref.label,style=_ref.style,labelStyle=_ref.labelStyle,onPress=_ref.onPress,disabled=_ref.disabled,color=_ref.color,uncheckedColor=_ref.uncheckedColor,status=_ref.status,colors=_ref.theme.colors,accessibilityLabel=_ref.accessibilityLabel,testID=_ref.testID,mode=_ref.mode;var radioButtonProps={value:value,disabled:disabled,status:status,color:color,uncheckedColor:uncheckedColor};var radioButton;if(mode==='android'){radioButton=React.createElement(RadioButtonAndroid,radioButtonProps);}else if(mode==='ios'){radioButton=React.createElement(RadioButtonIOS,radioButtonProps);}else{radioButton=React.createElement(RadioButton,radioButtonProps);}return React.createElement(RadioButtonContext.Consumer,null,function(context){return React.createElement(TouchableRipple,{onPress:disabled?undefined:function(){return handlePress({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value});},accessibilityLabel:accessibilityLabel,testID:testID},React.createElement(View,{style:[styles.container,style],pointerEvents:\"none\"},React.createElement(Text,{style:[styles.label,{color:colors.text},labelStyle]},label),radioButton));});};RadioButtonItem.displayName='RadioButton.Item';export default withTheme(RadioButtonItem);var RadioButtonItemWithTheme=withTheme(RadioButtonItem);export{RadioButtonItemWithTheme as RadioButtonItem};var styles=StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{fontSize:16,flex:1}});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","theme","colors","mode","radioButtonProps","value","disabled","status","color","uncheckedColor","radioButton","context","handlePress","onPress","onValueChange","testID","styles","text","withTheme","RadioButtonItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              <Text style={[styles.label, { color: colors.text }, labelStyle]}>\n                {label}\n              </Text>\n              {radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
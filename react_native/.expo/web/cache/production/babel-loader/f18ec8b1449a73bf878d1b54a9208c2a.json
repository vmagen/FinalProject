{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import{grey400,grey800,grey50,white,black}from\"../styles/colors\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import NativeSwitch from\"react-native-web/dist/exports/Switch\";import setColor from'color';import{withTheme}from\"../core/theming\";var version=NativeModules.PlatformConstants?NativeModules.PlatformConstants.reactNativeVersion:undefined;var Switch=function Switch(_ref){var value=_ref.value,disabled=_ref.disabled,onValueChange=_ref.onValueChange,color=_ref.color,theme=_ref.theme,rest=_objectWithoutProperties(_ref,[\"value\",\"disabled\",\"onValueChange\",\"color\",\"theme\"]);var checkedColor=color||theme.colors.accent;var onTintColor=Platform.OS==='ios'?checkedColor:disabled?theme.dark?setColor(white).alpha(0.1).rgb().string():setColor(black).alpha(0.12).rgb().string():setColor(checkedColor).alpha(0.5).rgb().string();var thumbTintColor=Platform.OS==='ios'?undefined:disabled?theme.dark?grey800:grey400:value?checkedColor:theme.dark?grey400:grey50;var props=version&&version.major===0&&version.minor<=56?{onTintColor:onTintColor,thumbTintColor:thumbTintColor}:Platform.OS==='web'?{activeTrackColor:onTintColor,thumbColor:thumbTintColor,activeThumbColor:checkedColor}:{thumbColor:thumbTintColor,trackColor:{true:onTintColor,false:''}};return React.createElement(NativeSwitch,_extends({value:value,disabled:disabled,onValueChange:disabled?undefined:onValueChange},props,rest));};export default withTheme(Switch);","map":{"version":3,"sources":["Switch.tsx"],"names":["version","NativeModules","Switch","rest","checkedColor","color","theme","onTintColor","Platform","disabled","setColor","thumbTintColor","value","props","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","onValueChange","withTheme"],"mappings":"4WAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,wB,mMAQA,MAAA,CAAA,QAAA,KAAA,OAAA,CACA,OAAA,SAAA,uBAEA,GAAMA,CAAAA,OAAO,CAAGC,aAAa,CAAbA,iBAAAA,CACZA,aAAa,CAAbA,iBAAAA,CADYA,kBAAAA,CAAhB,SAAA,CAkEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAOF,IAPG,CAAA,KAOH,MAPG,KAOH,CAPG,QAOH,MAPG,QAOH,CAPG,aAOH,MAPG,aAOH,CAPG,KAOH,MAPG,KAOH,CAPG,KAOH,MAPG,KAOH,CADRC,IACQ,qFACX,GAAMC,CAAAA,YAAY,CAAGC,KAAK,EAAIC,KAAK,CAALA,MAAAA,CAA9B,MAAA,CAEA,GAAMC,CAAAA,WAAW,CACfC,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,CAAAA,YAAAA,CAEIC,QAAQ,CACRH,KAAK,CAALA,IAAAA,CACEI,QAAQ,CAARA,KAAQ,CAARA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GADFJ,MACEI,EADFJ,CAEEI,QAAQ,CAARA,KAAQ,CAARA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAHM,MAGNA,EAHM,CAIRA,QAAQ,CAARA,YAAQ,CAARA,CAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GAPN,MAOMA,EAPN,CASA,GAAMC,CAAAA,cAAc,CAClBH,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,CAAAA,SAAAA,CAEIC,QAAQ,CACRH,KAAK,CAALA,IAAAA,CAAAA,OAAAA,CADQ,OAAA,CAIRM,KAAK,CAAA,YAAA,CAELN,KAAK,CAALA,IAAAA,CAAAA,OAAAA,CATN,MAAA,CAaA,GAAMO,CAAAA,KAAK,CACT,OAAO,EAAIb,OAAO,CAAPA,KAAAA,GAAX,CAAA,EAAkCA,OAAO,CAAPA,KAAAA,EAAlC,EAAA,CACI,CACEO,WADF,CACEA,WADF,CAEEI,cAAAA,CAAAA,cAFF,CADJ,CAKI,QAAQ,CAAR,EAAA,GAAA,KAAA,CACA,CACEG,gBAAgB,CADlB,WAAA,CAEEC,UAAU,CAFZ,cAAA,CAGEC,gBAAgB,CAAEZ,YAHpB,CADA,CAMA,CACEW,UAAU,CADZ,cAAA,CAEEE,UAAU,CAAE,CACVC,IAAI,CADM,WAAA,CAEVC,KAAK,CAAE,EAFG,CAFd,CAZN,CAoBA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CACE,KAAK,CADP,KAAA,CAEE,QAAQ,CAFV,QAAA,CAGE,aAAa,CAAEV,QAAQ,CAAA,SAAA,CAAeW,aAHxC,CAAA,CAAA,KAAA,CADF,IACE,CAAA,CADF,CApDF,CAAA,CA+DA,cAAeC,CAAAA,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const checkedColor = color || theme.colors.accent;\n\n  const onTintColor =\n    Platform.OS === 'ios'\n      ? checkedColor\n      : disabled\n      ? theme.dark\n        ? setColor(white).alpha(0.1).rgb().string()\n        : setColor(black).alpha(0.12).rgb().string()\n      : setColor(checkedColor).alpha(0.5).rgb().string();\n\n  const thumbTintColor =\n    Platform.OS === 'ios'\n      ? undefined\n      : disabled\n      ? theme.dark\n        ? grey800\n        : grey400\n      : value\n      ? checkedColor\n      : theme.dark\n      ? grey400\n      : grey50;\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: '',\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"module"}
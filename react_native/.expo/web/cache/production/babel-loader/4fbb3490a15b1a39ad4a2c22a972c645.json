{"ast":null,"code":"'use strict';var _regeneratorRuntime=require(\"@babel/runtime/regenerator\");var AppEventsLogger=require('react-native').NativeModules.FBAppEventsLogger;var Platform=require(\"react-native-web/dist/exports/Platform\").default;module.exports={setFlushBehavior:function setFlushBehavior(flushBehavior){AppEventsLogger.setFlushBehavior(flushBehavior);},logEvent:function logEvent(eventName){var valueToSum=0;for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}if(typeof args[0]==='number'){valueToSum=args.shift();}var parameters=null;if(typeof args[0]==='object'){parameters=args[0];}AppEventsLogger.logEvent(eventName,valueToSum,parameters);},logPurchase:function logPurchase(purchaseAmount,currencyCode,parameters){AppEventsLogger.logPurchase(purchaseAmount,currencyCode,parameters);},logPushNotificationOpen:function logPushNotificationOpen(payload){AppEventsLogger.logPushNotificationOpen(payload);},flush:function flush(){AppEventsLogger.flush();},setUserID:function setUserID(userID){AppEventsLogger.setUserID(userID);},getUserID:function getUserID(){return _regeneratorRuntime.async(function getUserID$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(AppEventsLogger.getUserID());case 2:return _context.abrupt(\"return\",_context.sent);case 3:case\"end\":return _context.stop();}}},null,null,null,Promise);},getAnonymousID:function getAnonymousID(){return _regeneratorRuntime.async(function getAnonymousID$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(AppEventsLogger.getAnonymousID());case 2:return _context2.abrupt(\"return\",_context2.sent);case 3:case\"end\":return _context2.stop();}}},null,null,null,Promise);},getAdvertiserID:function getAdvertiserID(){return _regeneratorRuntime.async(function getAdvertiserID$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regeneratorRuntime.awrap(AppEventsLogger.getAdvertiserID());case 2:return _context3.abrupt(\"return\",_context3.sent);case 3:case\"end\":return _context3.stop();}}},null,null,null,Promise);},getAttributionID:function getAttributionID(){return _regeneratorRuntime.async(function getAttributionID$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(Platform.OS==='ios')){_context4.next=2;break;}return _context4.abrupt(\"return\",null);case 2:_context4.next=4;return _regeneratorRuntime.awrap(AppEventsLogger.getAttributionID());case 4:return _context4.abrupt(\"return\",_context4.sent);case 5:case\"end\":return _context4.stop();}}},null,null,null,Promise);},updateUserProperties:function updateUserProperties(parameters){AppEventsLogger.updateUserProperties(parameters);},setUserData:function setUserData(userData){AppEventsLogger.setUserData(userData);},setPushNotificationsDeviceToken:function setPushNotificationsDeviceToken(deviceToken){AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);},setPushNotificationsRegistrationId:function setPushNotificationsRegistrationId(registrationId){AppEventsLogger.setPushNotificationsRegistrationId(registrationId);}};","map":{"version":3,"sources":["FBAppEventsLogger.js"],"names":["AppEventsLogger","require","module","setFlushBehavior","logEvent","valueToSum","args","parameters","logPurchase","logPushNotificationOpen","flush","setUserID","Platform","updateUserProperties","setUserData","setPushNotificationsDeviceToken","setPushNotificationsRegistrationId"],"mappings":"AAsBA,a,8DAEA,GAAMA,CAAAA,eAAe,CAAGC,OAAO,CAAPA,cAAO,CAAPA,CAAAA,aAAAA,CAAxB,iBAAA,C,uEAmCAC,MAAM,CAANA,OAAAA,CAAiB,CAKfC,gBALe,2BAKC,aALD,CAKyC,CACtDH,eAAe,CAAfA,gBAAAA,CAAAA,aAAAA,EANa,CAAA,CAkBfI,QAlBe,mBAkBP,SAlBO,CAkB8C,CAC3D,GAAIC,CAAAA,UAAU,CAAd,CAAA,CAD2D,8BAArD,IAAqD,qDAArD,IAAqD,0BAE3D,GAAI,MAAOC,CAAAA,IAAI,CAAX,CAAW,CAAX,GAAJ,QAAA,CAAiC,CAC/BD,UAAU,CAAGC,IAAI,CAAjBD,KAAaC,EAAbD,CACD,CACD,GAAIE,CAAAA,UAAU,CAAd,IAAA,CACA,GAAI,MAAOD,CAAAA,IAAI,CAAX,CAAW,CAAX,GAAJ,QAAA,CAAiC,CAC/BC,UAAU,CAAGD,IAAI,CAAjBC,CAAiB,CAAjBA,CACD,CACDP,eAAe,CAAfA,QAAAA,CAAAA,SAAAA,CAAAA,UAAAA,CAAAA,UAAAA,EA3Ba,CAAA,CAiCfQ,WAjCe,sBAiCJ,cAjCI,CAiCJ,YAjCI,CAiCJ,UAjCI,CAqCb,CACAR,eAAe,CAAfA,WAAAA,CAAAA,cAAAA,CAAAA,YAAAA,CAAAA,UAAAA,EAtCa,CAAA,CA4CfS,uBA5Ce,kCA4CQ,OA5CR,CA4C2B,CACxCT,eAAe,CAAfA,uBAAAA,CAAAA,OAAAA,EA7Ca,CAAA,CAmDfU,KAnDe,iBAmDP,CACNV,eAAe,CAAfA,KAAAA,GApDa,CAAA,CA2DfW,SA3De,oBA2DN,MA3DM,CA2DkB,CAC/BX,eAAe,CAAfA,SAAAA,CAAAA,MAAAA,EA5Da,CAAA,CAkEf,SAlEe,0LAmEAA,eAAe,CAA5B,SAAaA,EAnEA,8HAyEf,cAzEe,wMA0EAA,eAAe,CAA5B,cAAaA,EA1EA,iIAgFf,eAhFe,0MAiFAA,eAAe,CAA5B,eAAaA,EAjFA,iIAwFf,gBAxFe,+JAyFTY,QAAQ,CAARA,EAAAA,GAAJ,KAzFa,4DA0FX,IA1FW,2DA4FAZ,eAAe,CAA5B,gBAAaA,EA5FA,iIAmGfa,oBAnGe,+BAmGK,UAnGL,CAmG0B,CACvCb,eAAe,CAAfA,oBAAAA,CAAAA,UAAAA,EApGa,CAAA,CA0Gfc,WA1Ge,sBA0GJ,QA1GI,CA0GiB,CAC9Bd,eAAe,CAAfA,WAAAA,CAAAA,QAAAA,EA3Ga,CAAA,CAkHfe,+BAlHe,0CAkHgB,WAlHhB,CAkHsC,CACnDf,eAAe,CAAfA,+BAAAA,CAAAA,WAAAA,EAnHa,CAAA,CA0HfgB,kCA1He,6CA0HmB,cA1HnB,CA0H4C,CACzDhB,eAAe,CAAfA,kCAAAA,CAAAA,cAAAA,EACD,CA5Hc,CAAjBE","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\nconst {Platform} = require('react-native');\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<?string> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<?string> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<?string> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}
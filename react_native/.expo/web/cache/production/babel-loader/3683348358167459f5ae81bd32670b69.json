{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import color from'color';import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import Text from\"../Typography/Text\";import{withTheme}from\"../../core/theming\";import{ListAccordionGroupContext}from\"./ListAccordionGroup\";var ListAccordion=function ListAccordion(_ref){var left=_ref.left,title=_ref.title,description=_ref.description,children=_ref.children,theme=_ref.theme,titleStyle=_ref.titleStyle,descriptionStyle=_ref.descriptionStyle,_ref$titleNumberOfLin=_ref.titleNumberOfLines,titleNumberOfLines=_ref$titleNumberOfLin===void 0?1:_ref$titleNumberOfLin,_ref$descriptionNumbe=_ref.descriptionNumberOfLines,descriptionNumberOfLines=_ref$descriptionNumbe===void 0?2:_ref$descriptionNumbe,style=_ref.style,id=_ref.id,testID=_ref.testID,onPress=_ref.onPress,onLongPress=_ref.onLongPress,expandedProp=_ref.expanded;var _React$useState=React.useState(expandedProp||false),_React$useState2=_slicedToArray(_React$useState,2),expanded=_React$useState2[0],setExpanded=_React$useState2[1];var handlePressAction=function handlePressAction(){onPress===null||onPress===void 0?void 0:onPress();if(expandedProp===undefined){setExpanded(function(expanded){return!expanded;});}};var titleColor=color(theme.colors.text).alpha(0.87).rgb().string();var descriptionColor=color(theme.colors.text).alpha(0.54).rgb().string();var expandedInternal=expandedProp!==undefined?expandedProp:expanded;var groupContext=React.useContext(ListAccordionGroupContext);if(groupContext!==null&&!id){throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');}var isExpanded=groupContext?groupContext.expandedId===id:expandedInternal;var handlePress=groupContext&&id!==undefined?function(){return groupContext.onAccordionPress(id);}:handlePressAction;return React.createElement(View,null,React.createElement(TouchableRipple,{style:[styles.container,style],onPress:handlePress,onLongPress:onLongPress,accessibilityTraits:\"button\",accessibilityComponentType:\"button\",accessibilityRole:\"button\",testID:testID},React.createElement(View,{style:styles.row,pointerEvents:\"none\"},left?left({color:isExpanded?theme.colors.primary:descriptionColor}):null,React.createElement(View,{style:[styles.item,styles.content]},React.createElement(Text,{selectable:false,numberOfLines:titleNumberOfLines,style:[styles.title,{color:isExpanded?theme.colors.primary:titleColor},titleStyle]},title),description&&React.createElement(Text,{selectable:false,numberOfLines:descriptionNumberOfLines,style:[styles.description,{color:descriptionColor},descriptionStyle]},description)),React.createElement(View,{style:[styles.item,description?styles.multiline:undefined]},React.createElement(MaterialCommunityIcon,{name:isExpanded?'chevron-up':'chevron-down',color:titleColor,size:24,direction:I18nManager.isRTL?'rtl':'ltr'})))),isExpanded?React.Children.map(children,function(child){if(left&&React.isValidElement(child)&&!child.props.left&&!child.props.right){return React.cloneElement(child,{style:[styles.child,child.props.style]});}return child;}):null);};ListAccordion.displayName='List.Accordion';var styles=StyleSheet.create({container:{padding:8},row:{flexDirection:'row',alignItems:'center'},multiline:{height:40,alignItems:'center',justifyContent:'center'},title:{fontSize:16},description:{fontSize:14},item:{margin:8},child:{paddingLeft:64},content:{flex:1,justifyContent:'center'}});export default withTheme(ListAccordion);","map":{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expanded","expandedProp","React","handlePressAction","onPress","setExpanded","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","isExpanded","handlePress","id","styles","testID","left","description","I18nManager","child","style","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme"],"mappings":"iEAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,yLASA,MAAA,CAAA,eAAA,0CACA,MAAA,CAAA,qBAAA,gCACA,MAAA,CAAA,IAAA,0BACA,OAAA,SAAA,0BAEA,OAAA,yBAAA,4BAgHA,GAAMA,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAgBT,IAhBU,CAAA,IAgBV,MAhBU,IAgBV,CAhBU,KAgBV,MAhBU,KAgBV,CAhBU,WAgBV,MAhBU,WAgBV,CAhBU,QAgBV,MAhBU,QAgBV,CAhBU,KAgBV,MAhBU,KAgBV,CAhBU,UAgBV,MAhBU,UAgBV,CAhBU,gBAgBV,MAhBU,gBAgBV,4BARXC,kBAQW,CARXA,kBAQW,gCAhBU,CAgBV,kDAPXC,wBAOW,CAPXA,wBAOW,gCAhBU,CAgBV,uBAhBU,KAgBV,MAhBU,KAgBV,CAhBU,EAgBV,MAhBU,EAgBV,CAhBU,MAgBV,MAhBU,MAgBV,CAhBU,OAgBV,MAhBU,OAgBV,CAhBU,WAgBV,MAhBU,WAgBV,CADDE,YACC,MADXD,QACW,qBACqBE,KAAK,CAALA,QAAAA,CAC9BD,YAAY,EADd,KAAgCC,CADrB,oDACL,QADK,qBACL,WADK,qBAKX,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9BC,OAAO,GAAPA,IAAAA,EAAAA,OAAO,GAAA,IAAPA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,OAAO,EAAPA,CAEA,GAAIH,YAAY,GAAhB,SAAA,CAAgC,CAG9BI,WAAW,CAAEL,SAAAA,QAAD,QAAc,CAA1BK,QAAY,EAAD,CAAXA,CACD,CAPH,CAAA,CAUA,GAAMC,CAAAA,UAAU,CAAGC,KAAK,CAACC,KAAK,CAALA,MAAAA,CAAND,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAnB,MAAmBA,EAAnB,CACA,GAAME,CAAAA,gBAAgB,CAAGF,KAAK,CAACC,KAAK,CAALA,MAAAA,CAAND,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAzB,MAAyBA,EAAzB,CAEA,GAAMG,CAAAA,gBAAgB,CAAGT,YAAY,GAAZA,SAAAA,CAAAA,YAAAA,CAAzB,QAAA,CAEA,GAAMU,CAAAA,YAAY,CAAGT,KAAK,CAALA,UAAAA,CAArB,yBAAqBA,CAArB,CACA,GAAIS,YAAY,GAAZA,IAAAA,EAAyB,CAA7B,EAAA,CAAkC,CAChC,KAAM,IAAA,CAAA,KAAA,CAAN,oFAAM,CAAN,CAGD,CACD,GAAMC,CAAAA,UAAU,CAAGD,YAAY,CAC3BA,YAAY,CAAZA,UAAAA,GAD2B,EAAA,CAA/B,gBAAA,CAGA,GAAME,CAAAA,WAAW,CACfF,YAAY,EAAIG,EAAE,GAAlBH,SAAAA,CACI,iBAAMA,CAAAA,YAAY,CAAZA,gBAAAA,CADVA,EACUA,CAAN,EADJA,CADF,iBAAA,CAIA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAA,eAAA,CAAA,CACE,KAAK,CAAE,CAACI,MAAM,CAAP,SAAA,CADT,KACS,CADT,CAEE,OAAO,CAFT,WAAA,CAGE,WAAW,CAHb,WAAA,CAIE,mBAAmB,CAJrB,QAAA,CAKE,0BAA0B,CAL5B,QAAA,CAME,iBAAiB,CANnB,QAAA,CAOE,MAAM,CAAEC,MAPV,CAAA,CASE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAED,MAAM,CAAnB,GAAA,CAAyB,aAAa,CAAC,MAAvC,CAAA,CACGE,IAAI,CACDA,IAAI,CAAC,CACHV,KAAK,CAAEK,UAAU,CAAGJ,KAAK,CAALA,MAAAA,CAAH,OAAA,CAA0BC,gBADxC,CAAD,CADH,CADP,IAAA,CAME,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACM,MAAM,CAAP,IAAA,CAAcA,MAAM,CAApB,OAAA,CAAb,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,UAAU,CADZ,KAAA,CAEE,aAAa,CAFf,kBAAA,CAGE,KAAK,CAAE,CACLA,MAAM,CADD,KAAA,CAEL,CACER,KAAK,CAAEK,UAAU,CAAGJ,KAAK,CAALA,MAAAA,CAAH,OAAA,CAA0BF,UAD7C,CAFK,CAAA,UAAA,CAHT,CAAA,CADF,KACE,CADF,CAcGY,WAAW,EACV,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,UAAU,CADZ,KAAA,CAEE,aAAa,CAFf,wBAAA,CAGE,KAAK,CAAE,CACLH,MAAM,CADD,WAAA,CAEL,CACER,KAAK,CAAEE,gBADT,CAFK,CAAA,gBAAA,CAHT,CAAA,CArBN,WAqBM,CAfJ,CANF,CAoCE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,KAAK,CAAE,CAACM,MAAM,CAAP,IAAA,CAAcG,WAAW,CAAGH,MAAM,CAAT,SAAA,CAAzB,SAAA,CADT,CAAA,CAGE,KAAA,CAAA,aAAA,CAAA,qBAAA,CAAA,CACE,IAAI,CAAEH,UAAU,CAAA,YAAA,CADlB,cAAA,CAEE,KAAK,CAFP,UAAA,CAGE,IAAI,CAHN,EAAA,CAIE,SAAS,CAAEO,WAAW,CAAXA,KAAAA,CAAAA,KAAAA,CAA4B,KAJzC,CAAA,CAHF,CApCF,CATF,CADF,CA0DGP,UAAU,CACP,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,CAA8BQ,SAAAA,KAAD,CAAW,CACtC,GACEH,IAAI,EACJf,KAAK,CAALA,cAAAA,CADAe,KACAf,CADAe,EAEA,CAACG,KAAK,CAALA,KAAAA,CAFDH,IAAAA,EAGA,CAACG,KAAK,CAALA,KAAAA,CAJH,KAAA,CAKE,CACA,MAAO,CAAA,KAAK,CAAL,YAAA,CAAA,KAAA,CAA0B,CAC/BC,KAAK,CAAE,CAACN,MAAM,CAAP,KAAA,CAAeK,KAAK,CAALA,KAAAA,CAAf,KAAA,CADwB,CAA1B,CAAP,CAGD,CAED,MAAA,CAAA,KAAA,CAbK,CACP,CADO,CA3Df,IACE,CADF,CAjDF,CAAA,CAgIAvB,aAAa,CAAbA,WAAAA,CAAAA,gBAAAA,CAEA,GAAMkB,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BO,SAAS,CAAE,CACTC,OAAO,CAAE,CADA,CADoB,CAI/BC,GAAG,CAAE,CACHC,aAAa,CADV,KAAA,CAEHC,UAAU,CAAE,QAFT,CAJ0B,CAQ/BC,SAAS,CAAE,CACTC,MAAM,CADG,EAAA,CAETF,UAAU,CAFD,QAAA,CAGTG,cAAc,CAAE,QAHP,CARoB,CAa/BC,KAAK,CAAE,CACLC,QAAQ,CAAE,EADL,CAbwB,CAgB/Bb,WAAW,CAAE,CACXa,QAAQ,CAAE,EADC,CAhBkB,CAmB/BC,IAAI,CAAE,CACJC,MAAM,CAAE,CADJ,CAnByB,CAsB/Bb,KAAK,CAAE,CACLc,WAAW,CAAE,EADR,CAtBwB,CAyB/BC,OAAO,CAAE,CACPC,IAAI,CADG,CAAA,CAEPP,cAAc,CAAE,QAFT,CAzBsB,CAAlB,CAAf,CA+BA,cAAeQ,CAAAA,SAAS,CAAxB,aAAwB,CAAxB","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            <MaterialCommunityIcon\n              name={isExpanded ? 'chevron-up' : 'chevron-down'}\n              color={titleColor}\n              size={24}\n              direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n            />\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}
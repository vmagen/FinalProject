{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import color from'color';import Icon from\"./Icon\";import MaterialCommunityIcon from\"./MaterialCommunityIcon\";import Surface from\"./Surface\";import Text from\"./Typography/Text\";import TouchableRipple from\"./TouchableRipple/TouchableRipple\";import{withTheme}from\"../core/theming\";import{black,white}from\"../styles/colors\";var Chip=function Chip(_ref){var _ref$mode=_ref.mode,mode=_ref$mode===void 0?'flat':_ref$mode,children=_ref.children,icon=_ref.icon,avatar=_ref.avatar,_ref$selected=_ref.selected,selected=_ref$selected===void 0?false:_ref$selected,_ref$disabled=_ref.disabled,disabled=_ref$disabled===void 0?false:_ref$disabled,accessibilityLabel=_ref.accessibilityLabel,_ref$closeIconAccessi=_ref.closeIconAccessibilityLabel,closeIconAccessibilityLabel=_ref$closeIconAccessi===void 0?'Close':_ref$closeIconAccessi,onPress=_ref.onPress,onLongPress=_ref.onLongPress,onClose=_ref.onClose,textStyle=_ref.textStyle,style=_ref.style,theme=_ref.theme,testID=_ref.testID,selectedColor=_ref.selectedColor,ellipsizeMode=_ref.ellipsizeMode,rest=_objectWithoutProperties(_ref,[\"mode\",\"children\",\"icon\",\"avatar\",\"selected\",\"disabled\",\"accessibilityLabel\",\"closeIconAccessibilityLabel\",\"onPress\",\"onLongPress\",\"onClose\",\"textStyle\",\"style\",\"theme\",\"testID\",\"selectedColor\",\"ellipsizeMode\"]);var _React$useRef=React.useRef(new Animated.Value(0)),elevation=_React$useRef.current;var handlePressIn=function handlePressIn(){var scale=theme.animation.scale;Animated.timing(elevation,{toValue:4,duration:200*scale,useNativeDriver:true}).start();};var handlePressOut=function handlePressOut(){var scale=theme.animation.scale;Animated.timing(elevation,{toValue:0,duration:150*scale,useNativeDriver:true}).start();};var dark=theme.dark,colors=theme.colors;var _ref2=StyleSheet.flatten(style)||{},_ref2$backgroundColor=_ref2.backgroundColor,backgroundColor=_ref2$backgroundColor===void 0?mode==='outlined'?colors.surface:dark?'#383838':'#ebebeb':_ref2$backgroundColor,_ref2$borderRadius=_ref2.borderRadius,borderRadius=_ref2$borderRadius===void 0?16:_ref2$borderRadius;var borderColor=mode==='outlined'?color(selectedColor!==undefined?selectedColor:color(dark?white:black)).alpha(0.29).rgb().string():backgroundColor;var textColor=disabled?colors.disabled:color(selectedColor!==undefined?selectedColor:colors.text).alpha(0.87).rgb().string();var iconColor=disabled?colors.disabled:color(selectedColor!==undefined?selectedColor:colors.text).alpha(0.54).rgb().string();var selectedBackgroundColor=(dark?color(backgroundColor).lighten(mode==='outlined'?0.2:0.4):color(backgroundColor).darken(mode==='outlined'?0.08:0.2)).rgb().string();var underlayColor=selectedColor?color(selectedColor).fade(0.5).rgb().string():selectedBackgroundColor;var accessibilityTraits=['button'];var accessibilityState={selected:selected,disabled:disabled};if(selected){accessibilityTraits.push('selected');}if(disabled){accessibilityTraits.push('disabled');}return React.createElement(Surface,_extends({style:[styles.container,{elevation:Platform.OS==='android'?elevation:0,backgroundColor:selected?selectedBackgroundColor:backgroundColor,borderColor:borderColor,borderRadius:borderRadius},style]},rest),React.createElement(TouchableRipple,{borderless:true,delayPressIn:0,style:{borderRadius:borderRadius},onPress:onPress,onLongPress:onLongPress,onPressIn:handlePressIn,onPressOut:handlePressOut,underlayColor:underlayColor,disabled:disabled,accessibilityLabel:accessibilityLabel,accessibilityTraits:accessibilityTraits,accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityState:accessibilityState,testID:testID},React.createElement(View,{style:[styles.content,{paddingRight:onClose?32:4}]},avatar&&!icon?React.createElement(View,{style:[styles.avatarWrapper,disabled&&{opacity:0.26}]},React.isValidElement(avatar)?React.cloneElement(avatar,{style:[styles.avatar,avatar.props.style]}):avatar):null,icon||selected?React.createElement(View,{style:[styles.icon,avatar?[styles.avatar,styles.avatarSelected]:null]},icon?React.createElement(Icon,{source:icon,color:avatar?white:iconColor,size:18}):React.createElement(MaterialCommunityIcon,{name:\"check\",color:avatar?white:iconColor,size:18,direction:\"ltr\"})):null,React.createElement(Text,{selectable:false,numberOfLines:1,style:[styles.text,_objectSpread(_objectSpread({},theme.fonts.regular),{},{color:textColor,marginRight:onClose?0:8,marginLeft:avatar||icon||selected?4:8}),textStyle],ellipsizeMode:ellipsizeMode},children))),onClose?React.createElement(View,{style:styles.closeButtonStyle},React.createElement(TouchableWithoutFeedback,{onPress:onClose,accessibilityTraits:\"button\",accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityLabel:closeIconAccessibilityLabel},React.createElement(View,{style:[styles.icon,styles.closeIcon]},React.createElement(MaterialCommunityIcon,{name:\"close-circle\",size:16,color:iconColor,direction:\"ltr\"})))):null);};var styles=StyleSheet.create({container:{borderWidth:StyleSheet.hairlineWidth,borderStyle:'solid',flexDirection:'row'},content:{flexDirection:'row',alignItems:'center',paddingLeft:4,position:'relative'},icon:{padding:4,alignSelf:'center'},closeIcon:{marginRight:4},text:{minHeight:24,lineHeight:24,textAlignVertical:'center',marginVertical:4},avatar:{width:24,height:24,borderRadius:12},avatarWrapper:{marginRight:4},avatarSelected:{position:'absolute',top:4,left:4,backgroundColor:'rgba(0, 0, 0, .29)'},closeButtonStyle:{position:'absolute',right:0,height:'100%',justifyContent:'center',alignItems:'center'}});export default withTheme(Chip);","map":{"version":3,"sources":["Chip.tsx"],"names":["Chip","mode","selected","disabled","closeIconAccessibilityLabel","rest","current","elevation","React","Animated","handlePressIn","scale","theme","toValue","duration","useNativeDriver","handlePressOut","colors","backgroundColor","dark","borderRadius","StyleSheet","borderColor","color","selectedColor","textColor","iconColor","selectedBackgroundColor","underlayColor","accessibilityTraits","accessibilityState","styles","Platform","testID","paddingRight","onClose","avatar","opacity","style","icon","marginRight","marginLeft","ellipsizeMode","closeButtonStyle","container","borderWidth","borderStyle","flexDirection","content","alignItems","paddingLeft","position","padding","alignSelf","closeIcon","text","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","avatarWrapper","avatarSelected","top","left","right","justifyContent","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n\n  const {\n    backgroundColor = mode === 'outlined'\n      ? colors.surface\n      : dark\n      ? '#383838'\n      : '#ebebeb',\n    borderRadius = 16,\n  } = StyleSheet.flatten(style) || {};\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n  const selectedBackgroundColor = (dark\n    ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n    : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits: AccessibilityTrait[] = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={{ borderRadius }}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              <MaterialCommunityIcon\n                name=\"close-circle\"\n                size={16}\n                color={iconColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: 'row',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}
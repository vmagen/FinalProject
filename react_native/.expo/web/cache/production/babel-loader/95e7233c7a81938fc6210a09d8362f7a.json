{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import color from'color';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import AnimatedText from\"./Typography/AnimatedText\";import{withTheme}from\"../core/theming\";var HelperText=function HelperText(_ref){var style=_ref.style,_ref$type=_ref.type,type=_ref$type===void 0?'info':_ref$type,_ref$visible=_ref.visible,visible=_ref$visible===void 0?true:_ref$visible,theme=_ref.theme,onLayout=_ref.onLayout,_ref$padding=_ref.padding,padding=_ref$padding===void 0?'normal':_ref$padding,rest=_objectWithoutProperties(_ref,[\"style\",\"type\",\"visible\",\"theme\",\"onLayout\",\"padding\"]);var _React$useRef=React.useRef(new Animated.Value(visible?1:0)),shown=_React$useRef.current;var _React$useRef2=React.useRef(0),textHeight=_React$useRef2.current;var scale=theme.animation.scale;React.useEffect(function(){if(visible){Animated.timing(shown,{toValue:1,duration:150*scale,useNativeDriver:true}).start();}else{Animated.timing(shown,{toValue:0,duration:180*scale,useNativeDriver:true}).start();}},[visible,scale,shown]);var handleTextLayout=function handleTextLayout(e){onLayout===null||onLayout===void 0?void 0:onLayout(e);textHeight=e.nativeEvent.layout.height;};var colors=theme.colors,dark=theme.dark;var textColor=type==='error'?colors.error:color(colors.text).alpha(dark?0.7:0.54).rgb().string();return React.createElement(AnimatedText,_extends({onLayout:handleTextLayout,style:[styles.text,padding!=='none'?styles.padding:{},{color:textColor,opacity:shown,transform:visible&&type==='error'?[{translateY:shown.interpolate({inputRange:[0,1],outputRange:[-textHeight/2,0]})}]:[]},style]},rest),rest.children);};var styles=StyleSheet.create({text:{fontSize:12,paddingVertical:4},padding:{paddingHorizontal:12}});export default withTheme(HelperText);","map":{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","type","visible","padding","rest","current","shown","React","Animated","textHeight","scale","theme","toValue","duration","useNativeDriver","handleTextLayout","e","onLayout","dark","textColor","colors","color","styles","opacity","transform","translateY","inputRange","outputRange","text","fontSize","paddingVertical","paddingHorizontal","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    // @ts-ignore\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}
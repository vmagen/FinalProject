{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React from'react';import PropTypes from'prop-types';import deepmerge from'deepmerge';import colors from\"./colors\";import darkColors from\"./colorsDark\";export var ThemeContext=React.createContext({theme:{colors:colors}});var ThemeProvider=function(_React$Component){_inherits(ThemeProvider,_React$Component);var _super=_createSuper(ThemeProvider);function ThemeProvider(props){var _this;_classCallCheck(this,ThemeProvider);_this=_super.call(this,props);_this.updateTheme=function(updates){_this.setState(function(_ref){var theme=_ref.theme;return{theme:deepmerge(theme,updates)};});};_this.replaceTheme=function(theme){_this.setState(function(){return{theme:deepmerge(_this.defaultTheme,theme)};});};_this.getTheme=function(){return _this.state.theme;};var defaultColors=props.useDark?darkColors:colors;_this.defaultTheme=deepmerge({colors:defaultColors},props.theme);_this.state={theme:_this.defaultTheme,useDark:props.useDark};return _this;}_createClass(ThemeProvider,[{key:\"render\",value:function render(){return React.createElement(ThemeContext.Provider,{value:{theme:this.state.theme,updateTheme:this.updateTheme,replaceTheme:this.replaceTheme}},this.props.children);}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){var useDark=props.useDark;if(useDark!==state.useDark){var defaultColors=useDark?darkColors:colors;return{theme:deepmerge(state.theme,deepmerge({colors:defaultColors},props.theme)),useDark:useDark};}return null;}}]);return ThemeProvider;}(React.Component);export{ThemeProvider as default};ThemeProvider.propTypes={theme:PropTypes.object,children:PropTypes.node.isRequired,useDark:PropTypes.bool};ThemeProvider.defaultProps={theme:{},useDark:false};export var ThemeConsumer=ThemeContext.Consumer;","map":{"version":3,"sources":["C:/Users/vmage/OneDrive/Ruppin/שנה ג/סמסטר ב/FinalProject/react_native/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["React","PropTypes","deepmerge","colors","darkColors","ThemeContext","createContext","theme","ThemeProvider","props","updateTheme","updates","setState","replaceTheme","defaultTheme","getTheme","state","defaultColors","useDark","children","Component","propTypes","object","node","isRequired","bool","defaultProps","ThemeConsumer","Consumer"],"mappings":"ggCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAOC,CAAAA,SAAP,KAAsB,WAAtB,CAEA,MAAOC,CAAAA,MAAP,gBACA,MAAOC,CAAAA,UAAP,oBAEA,MAAO,IAAMC,CAAAA,YAAY,CAAGL,KAAK,CAACM,aAAN,CAAoB,CAC9CC,KAAK,CAAE,CACLJ,MAAM,CAANA,MADK,CADuC,CAApB,CAArB,C,GAMcK,CAAAA,a,6GACnB,uBAAYC,KAAZ,CAAmB,+CACjB,uBAAMA,KAAN,EADiB,MAoCnBC,WApCmB,CAoCL,SAACC,OAAD,CAAa,CACzB,MAAKC,QAAL,CAAc,kBAAGL,CAAAA,KAAH,MAAGA,KAAH,OAAgB,CAC5BA,KAAK,CAAEL,SAAS,CAACK,KAAD,CAAQI,OAAR,CADY,CAAhB,EAAd,EAGD,CAxCkB,OA0CnBE,YA1CmB,CA0CJ,SAACN,KAAD,CAAW,CACxB,MAAKK,QAAL,CAAc,iBAAO,CACnBL,KAAK,CAAEL,SAAS,CAAC,MAAKY,YAAN,CAAoBP,KAApB,CADG,CAAP,EAAd,EAGD,CA9CkB,OAgDnBQ,QAhDmB,CAgDR,iBAAM,OAAKC,KAAL,CAAWT,KAAjB,EAhDQ,CAGjB,GAAMU,CAAAA,aAAa,CAAGR,KAAK,CAACS,OAAN,CAAgBd,UAAhB,CAA6BD,MAAnD,CAEA,MAAKW,YAAL,CAAoBZ,SAAS,CAC3B,CACEC,MAAM,CAAEc,aADV,CAD2B,CAI3BR,KAAK,CAACF,KAJqB,CAA7B,CAMA,MAAKS,KAAL,CAAa,CACXT,KAAK,CAAE,MAAKO,YADD,CAEXI,OAAO,CAAET,KAAK,CAACS,OAFJ,CAAb,CAXiB,aAelB,C,gDAmCD,iBAAS,CACP,MACE,qBAAC,YAAD,CAAc,QAAd,EACE,KAAK,CAAE,CACLX,KAAK,CAAE,KAAKS,KAAL,CAAWT,KADb,CAELG,WAAW,CAAE,KAAKA,WAFb,CAGLG,YAAY,CAAE,KAAKA,YAHd,CADT,EAOG,KAAKJ,KAAL,CAAWU,QAPd,CADF,CAWD,C,0CA7CD,kCAAgCV,KAAhC,CAAuCO,KAAvC,CAA8C,IACpCE,CAAAA,OADoC,CACxBT,KADwB,CACpCS,OADoC,CAE5C,GAAIA,OAAO,GAAKF,KAAK,CAACE,OAAtB,CAA+B,CAC7B,GAAMD,CAAAA,aAAa,CAAGC,OAAO,CAAGd,UAAH,CAAgBD,MAA7C,CACA,MAAO,CACLI,KAAK,CAAEL,SAAS,CACdc,KAAK,CAACT,KADQ,CAEdL,SAAS,CACP,CACEC,MAAM,CAAEc,aADV,CADO,CAIPR,KAAK,CAACF,KAJC,CAFK,CADX,CAULW,OAAO,CAAPA,OAVK,CAAP,CAYD,CACD,MAAO,KAAP,CACD,C,2BApCwClB,KAAK,CAACoB,S,SAA5BZ,a,aAkErBA,aAAa,CAACa,SAAd,CAA0B,CACxBd,KAAK,CAAEN,SAAS,CAACqB,MADO,CAExBH,QAAQ,CAAElB,SAAS,CAACsB,IAAV,CAAeC,UAFD,CAGxBN,OAAO,CAAEjB,SAAS,CAACwB,IAHK,CAA1B,CAMAjB,aAAa,CAACkB,YAAd,CAA6B,CAC3BnB,KAAK,CAAE,EADoB,CAE3BW,OAAO,CAAE,KAFkB,CAA7B,CAKA,MAAO,IAAMS,CAAAA,aAAa,CAAGtB,YAAY,CAACuB,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deepmerge from 'deepmerge';\n\nimport colors from './colors';\nimport darkColors from './colorsDark';\n\nexport const ThemeContext = React.createContext({\n  theme: {\n    colors,\n  },\n});\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const defaultColors = props.useDark ? darkColors : colors;\n\n    this.defaultTheme = deepmerge(\n      {\n        colors: defaultColors,\n      },\n      props.theme\n    );\n    this.state = {\n      theme: this.defaultTheme,\n      useDark: props.useDark,\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { useDark } = props;\n    if (useDark !== state.useDark) {\n      const defaultColors = useDark ? darkColors : colors;\n      return {\n        theme: deepmerge(\n          state.theme,\n          deepmerge(\n            {\n              colors: defaultColors,\n            },\n            props.theme\n          )\n        ),\n        useDark,\n      };\n    }\n    return null;\n  }\n  updateTheme = (updates) => {\n    this.setState(({ theme }) => ({\n      theme: deepmerge(theme, updates),\n    }));\n  };\n\n  replaceTheme = (theme) => {\n    this.setState(() => ({\n      theme: deepmerge(this.defaultTheme, theme),\n    }));\n  };\n\n  getTheme = () => this.state.theme;\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n          replaceTheme: this.replaceTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n  useDark: PropTypes.bool,\n};\n\nThemeProvider.defaultProps = {\n  theme: {},\n  useDark: false,\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}
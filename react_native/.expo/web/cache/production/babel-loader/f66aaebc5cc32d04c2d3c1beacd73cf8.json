{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import React from'react';import color from'color';import Text from\"react-native-web/dist/exports/Text\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Animated from\"react-native-web/dist/exports/Animated\";import{withTheme}from\"../../../core/theming\";import{AdornmentSide}from\"./enums\";var AFFIX_OFFSET=12;var AffixContext=React.createContext({textStyle:{fontFamily:'',color:''},topPosition:null,side:AdornmentSide.Left});var AffixAdornment=function AffixAdornment(_ref){var affix=_ref.affix,side=_ref.side,textStyle=_ref.textStyle,topPosition=_ref.topPosition,onLayout=_ref.onLayout,visible=_ref.visible,paddingHorizontal=_ref.paddingHorizontal;return React.createElement(AffixContext.Provider,{value:{side:side,textStyle:textStyle,topPosition:topPosition,onLayout:onLayout,visible:visible,paddingHorizontal:paddingHorizontal}},affix);};var TextInputAffix=function TextInputAffix(_ref2){var text=_ref2.text,labelStyle=_ref2.textStyle,theme=_ref2.theme;var _React$useContext=React.useContext(AffixContext),textStyle=_React$useContext.textStyle,onLayout=_React$useContext.onLayout,topPosition=_React$useContext.topPosition,side=_React$useContext.side,visible=_React$useContext.visible,paddingHorizontal=_React$useContext.paddingHorizontal;var textColor=color(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var offset=typeof paddingHorizontal==='number'?paddingHorizontal:AFFIX_OFFSET;var style=_defineProperty({top:topPosition},side,offset);return React.createElement(Animated.View,{style:[styles.container,style,{opacity:(visible===null||visible===void 0?void 0:visible.interpolate({inputRange:[0,1],outputRange:[1,0]}))||1}],onLayout:onLayout},React.createElement(Text,{style:[{color:textColor},textStyle,labelStyle]},text));};TextInputAffix.displayName='TextInput.Affix';var styles=StyleSheet.create({container:{position:'absolute',justifyContent:'center',alignItems:'center'}});export default withTheme(TextInputAffix);export{TextInputAffix,AffixAdornment};","map":{"version":3,"sources":["TextInputAffix.tsx"],"names":["AFFIX_OFFSET","AffixContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","paddingHorizontal","onLayout","visible","TextInputAffix","theme","React","textColor","offset","style","top","styles","opacity","inputRange","outputRange","container","position","justifyContent","alignItems","withTheme"],"mappings":"mEAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,KAAA,KAAA,OAAA,C,mLAUA,OAAA,SAAA,6BACA,OAAA,aAAA,eAEA,GAAMA,CAAAA,YAAY,CAAlB,EAAA,CAqBA,GAAMC,CAAAA,YAAY,CAAG,KAAK,CAAL,aAAA,CAAkC,CACrDC,SAAS,CAAE,CAAEC,UAAU,CAAZ,EAAA,CAAkBC,KAAK,CAAE,EAAzB,CAD0C,CAErDC,WAAW,CAF0C,IAAA,CAGrDC,IAAI,CAAEC,aAAa,CAACC,IAHiC,CAAlC,CAArB,CAMA,GAAMC,CAAAA,cAKL,CAAG,QALEA,CAAAA,cAKF,MAQE,IARD,CAAA,KAQC,MARD,KAQC,CARD,IAQC,MARD,IAQC,CARD,SAQC,MARD,SAQC,CARD,WAQC,MARD,WAQC,CARD,QAQC,MARD,QAQC,CARD,OAQC,MARD,OAQC,CADJC,iBACI,MADJA,iBACI,CACJ,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,CAAA,CACE,KAAK,CAAE,CACLJ,IADK,CACLA,IADK,CAELJ,SAFK,CAELA,SAFK,CAGLG,WAHK,CAGLA,WAHK,CAILM,QAJK,CAILA,QAJK,CAKLC,OALK,CAKLA,OALK,CAMLF,iBAAAA,CAAAA,iBANK,CADT,CAAA,CADF,KACE,CADF,CAdF,CAAA,CA8BA,GAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,OAAmD,IAAlD,CAAA,IAAkD,OAAlD,IAAkD,CAAlD,UAAkD,OAA1CX,SAA0C,CAAnBY,KAAmB,OAAnBA,KAAmB,uBAQpEC,KAAK,CAALA,UAAAA,CAPJ,YAOIA,CARoE,CAClE,SADkE,mBAClE,SADkE,CAClE,QADkE,mBAClE,QADkE,CAClE,WADkE,mBAClE,WADkE,CAClE,IADkE,mBAClE,IADkE,CAClE,OADkE,mBAClE,OADkE,CAOtEL,iBAPsE,mBAOtEA,iBAPsE,CASxE,GAAMM,CAAAA,SAAS,CAAGZ,KAAK,CAACU,KAAK,CAALA,MAAAA,CAANV,IAAK,CAALA,CAAAA,KAAAA,CACTU,KAAK,CAALA,IAAAA,CAAAA,GAAAA,CADSV,IAAAA,EAAAA,GAAAA,GAAlB,MAAkBA,EAAlB,CAKA,GAAMa,CAAAA,MAAM,CACV,MAAA,CAAA,iBAAA,GAAA,QAAA,CAAA,iBAAA,CADF,YAAA,CAGA,GAAMC,CAAAA,KAAK,kBACTC,GAAG,CADS,WAAH,EAET,IAFS,CAEDF,MAFC,CAAX,CAKA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,CAAA,CACE,KAAK,CAAE,CACLG,MAAM,CADD,SAAA,CAAA,KAAA,CAGL,CACEC,OAAO,CACL,CAAA,OAAO,GAAP,IAAA,EAAA,OAAO,GAAA,IAAP,EAAA,CAAA,IAAA,EAAA,CAAA,OAAO,CAAP,WAAA,CAAqB,CACnBC,UAAU,CAAE,CAAA,CAAA,CADO,CACP,CADO,CAEnBC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAA,CAFM,CAArB,CAAA,GAGM,CALV,CAHK,CADT,CAYE,QAAQ,CAAEZ,QAZZ,CAAA,CAcE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAAC,CAAEP,KAAK,CAAEY,SAAT,CAAD,CAAA,SAAA,CAAA,UAAA,CAAb,CAAA,CAfJ,IAeI,CAdF,CADF,CAtBF,CAAA,CAyCAH,cAAc,CAAdA,WAAAA,CAAAA,iBAAAA,CAEA,GAAMO,CAAAA,MAAM,CAAG,UAAU,CAAV,MAAA,CAAkB,CAC/BI,SAAS,CAAE,CACTC,QAAQ,CADC,UAAA,CAETC,cAAc,CAFL,QAAA,CAGTC,UAAU,CAAE,QAHH,CADoB,CAAlB,CAAf,CAQA,cAAeC,CAAAA,SAAS,CAAxB,cAAwB,CAAxB,CAGA,OAAA,cAAA,CAAA,cAAA","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle, labelStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress,isChecked}from\"./utils\";import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var RadioButtonIOS=function RadioButtonIOS(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,status=_ref.status,value=_ref.value,testID=_ref.testID,rest=_objectWithoutProperties(_ref,[\"disabled\",\"onPress\",\"theme\",\"status\",\"value\",\"testID\"]);var checkedColor=disabled?theme.colors.disabled:rest.color||theme.colors.accent;var rippleColor;if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();}return React.createElement(RadioButtonContext.Consumer,null,function(context){var checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(){handlePress({onPress:onPress,value:value,onValueChange:context===null||context===void 0?void 0:context.onValueChange});},accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:checked?'radiobutton_checked':'radiobutton_unchecked',accessibilityRole:\"radio\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(View,{style:{opacity:checked?1:0}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:\"check\",size:24,color:checkedColor,direction:\"ltr\"})));});};RadioButtonIOS.displayName='RadioButton.IOS';var styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default withTheme(RadioButtonIOS);var RadioButtonIOSWithTheme=withTheme(RadioButtonIOS);export{RadioButtonIOSWithTheme as RadioButtonIOS};","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","rest","checkedColor","disabled","theme","rippleColor","color","context","checked","contextValue","status","value","handlePress","onPress","onValueChange","styles","testID","opacity","container","borderRadius","padding","withTheme","RadioButtonIOSWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}
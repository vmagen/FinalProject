{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress,isChecked}from\"./utils\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{withTheme}from\"../../core/theming\";var BORDER_WIDTH=2;var RadioButtonAndroid=function RadioButtonAndroid(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,value=_ref.value,status=_ref.status,testID=_ref.testID,rest=_objectWithoutProperties(_ref,[\"disabled\",\"onPress\",\"theme\",\"value\",\"status\",\"testID\"]);var _React$useRef=React.useRef(new Animated.Value(BORDER_WIDTH)),borderAnim=_React$useRef.current;var _React$useRef2=React.useRef(new Animated.Value(1)),radioAnim=_React$useRef2.current;var isFirstRendering=React.useRef(true);var scale=theme.animation.scale;React.useEffect(function(){if(isFirstRendering.current){isFirstRendering.current=false;return;}if(status==='checked'){radioAnim.setValue(1.2);Animated.timing(radioAnim,{toValue:1,duration:150*scale,useNativeDriver:true}).start();}else{borderAnim.setValue(10);Animated.timing(borderAnim,{toValue:BORDER_WIDTH,duration:150*scale,useNativeDriver:false}).start();}},[status,borderAnim,radioAnim,scale]);var checkedColor=rest.color||theme.colors.accent;var uncheckedColor=rest.uncheckedColor||color(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var rippleColor,radioColor;return React.createElement(RadioButtonContext.Consumer,null,function(context){var checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();radioColor=theme.colors.disabled;}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();radioColor=checked?checkedColor:uncheckedColor;}return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(){handlePress({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value});},accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:checked?'radiobutton_checked':'radiobutton_unchecked',accessibilityRole:\"radio\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(Animated.View,{style:[styles.radio,{borderColor:radioColor,borderWidth:borderAnim}]},checked?React.createElement(View,{style:[StyleSheet.absoluteFill,styles.radioContainer]},React.createElement(Animated.View,{style:[styles.dot,{backgroundColor:radioColor,transform:[{scale:radioAnim}]}]})):null));});};RadioButtonAndroid.displayName='RadioButton.Android';var styles=StyleSheet.create({container:{borderRadius:18},radioContainer:{alignItems:'center',justifyContent:'center'},radio:{height:20,width:20,borderRadius:10,margin:8},dot:{height:10,width:10,borderRadius:5}});export default withTheme(RadioButtonAndroid);var RadioButtonAndroidWithTheme=withTheme(RadioButtonAndroid);export{RadioButtonAndroidWithTheme as RadioButtonAndroid};","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","rest","current","borderAnim","React","Animated","radioAnim","isFirstRendering","scale","theme","status","toValue","duration","useNativeDriver","checkedColor","uncheckedColor","color","context","checked","contextValue","value","rippleColor","radioColor","disabled","handlePress","onPress","onValueChange","styles","testID","borderColor","borderWidth","StyleSheet","backgroundColor","transform","container","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot","withTheme","RadioButtonAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\n\nvar Platform = require(\"react-native-web/dist/exports/Platform\").default;\n\nmodule.exports = {\n  setFlushBehavior: function setFlushBehavior(flushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n  logEvent: function logEvent(eventName) {\n    var valueToSum = 0;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n\n    var parameters = null;\n\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n  logPurchase: function logPurchase(purchaseAmount, currencyCode, parameters) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n  logPushNotificationOpen: function logPushNotificationOpen(payload) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n  flush: function flush() {\n    AppEventsLogger.flush();\n  },\n  setUserID: function setUserID(userID) {\n    AppEventsLogger.setUserID(userID);\n  },\n  getUserID: function getUserID() {\n    return _regeneratorRuntime.async(function getUserID$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getUserID());\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAnonymousID: function getAnonymousID() {\n    return _regeneratorRuntime.async(function getAnonymousID$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getAnonymousID());\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAdvertiserID: function getAdvertiserID() {\n    return _regeneratorRuntime.async(function getAdvertiserID$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getAdvertiserID());\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAttributionID: function getAttributionID() {\n    return _regeneratorRuntime.async(function getAttributionID$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(Platform.OS === 'ios')) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 2:\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getAttributionID());\n\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  updateUserProperties: function updateUserProperties(parameters) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n  setUserData: function setUserData(userData) {\n    AppEventsLogger.setUserData(userData);\n  },\n  setPushNotificationsDeviceToken: function setPushNotificationsDeviceToken(deviceToken) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n  setPushNotificationsRegistrationId: function setPushNotificationsRegistrationId(registrationId) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  }\n};","map":{"version":3,"sources":["FBAppEventsLogger.js"],"names":["AppEventsLogger","require","module","setFlushBehavior","logEvent","valueToSum","args","parameters","logPurchase","logPushNotificationOpen","flush","setUserID","Platform","updateUserProperties","setUserData","setPushNotificationsDeviceToken","setPushNotificationsRegistrationId"],"mappings":"AAsBA;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAPA,cAAO,CAAPA,CAAAA,aAAAA,CAAxB,iBAAA;;;;AAmCAC,MAAM,CAANA,OAAAA,GAAiB;AAKfC,EAAAA,gBALe,4BAKC,aALD,EAKyC;AACtDH,IAAAA,eAAe,CAAfA,gBAAAA,CAAAA,aAAAA;AANa,GAAA;AAkBfI,EAAAA,QAlBe,oBAkBP,SAlBO,EAkB8C;AAC3D,QAAIC,UAAU,GAAd,CAAA;;AAD2D,sCAArD,IAAqD;AAArD,MAAA,IAAqD;AAAA;;AAE3D,QAAI,OAAOC,IAAI,CAAX,CAAW,CAAX,KAAJ,QAAA,EAAiC;AAC/BD,MAAAA,UAAU,GAAGC,IAAI,CAAjBD,KAAaC,EAAbD;AACD;;AACD,QAAIE,UAAU,GAAd,IAAA;;AACA,QAAI,OAAOD,IAAI,CAAX,CAAW,CAAX,KAAJ,QAAA,EAAiC;AAC/BC,MAAAA,UAAU,GAAGD,IAAI,CAAjBC,CAAiB,CAAjBA;AACD;;AACDP,IAAAA,eAAe,CAAfA,QAAAA,CAAAA,SAAAA,EAAAA,UAAAA,EAAAA,UAAAA;AA3Ba,GAAA;AAiCfQ,EAAAA,WAjCe,uBAiCJ,cAjCI,EAiCJ,YAjCI,EAiCJ,UAjCI,EAqCb;AACAR,IAAAA,eAAe,CAAfA,WAAAA,CAAAA,cAAAA,EAAAA,YAAAA,EAAAA,UAAAA;AAtCa,GAAA;AA4CfS,EAAAA,uBA5Ce,mCA4CQ,OA5CR,EA4C2B;AACxCT,IAAAA,eAAe,CAAfA,uBAAAA,CAAAA,OAAAA;AA7Ca,GAAA;AAmDfU,EAAAA,KAnDe,mBAmDP;AACNV,IAAAA,eAAe,CAAfA,KAAAA;AApDa,GAAA;AA2DfW,EAAAA,SA3De,qBA2DN,MA3DM,EA2DkB;AAC/BX,IAAAA,eAAe,CAAfA,SAAAA,CAAAA,MAAAA;AA5Da,GAAA;AAkEf,EAAA,SAlEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAmEAA,eAAe,CAA5B,SAAaA,EAnEA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyEf,EAAA,cAzEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA0EAA,eAAe,CAA5B,cAAaA,EA1EA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgFf,EAAA,eAhFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAiFAA,eAAe,CAA5B,eAAaA,EAjFA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwFf,EAAA,gBAxFe;AAAA;AAAA;AAAA;AAAA;AAAA,kBAyFTY,QAAQ,CAARA,EAAAA,KAAJ,KAzFa;AAAA;AAAA;AAAA;;AAAA,8CA0FX,IA1FW;;AAAA;AAAA;AAAA,6CA4FAZ,eAAe,CAA5B,gBAAaA,EA5FA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmGfa,EAAAA,oBAnGe,gCAmGK,UAnGL,EAmG0B;AACvCb,IAAAA,eAAe,CAAfA,oBAAAA,CAAAA,UAAAA;AApGa,GAAA;AA0Gfc,EAAAA,WA1Ge,uBA0GJ,QA1GI,EA0GiB;AAC9Bd,IAAAA,eAAe,CAAfA,WAAAA,CAAAA,QAAAA;AA3Ga,GAAA;AAkHfe,EAAAA,+BAlHe,2CAkHgB,WAlHhB,EAkHsC;AACnDf,IAAAA,eAAe,CAAfA,+BAAAA,CAAAA,WAAAA;AAnHa,GAAA;AA0HfgB,EAAAA,kCA1He,8CA0HmB,cA1HnB,EA0H4C;AACzDhB,IAAAA,eAAe,CAAfA,kCAAAA,CAAAA,cAAAA;AACD;AA5Hc,CAAjBE","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\nconst {Platform} = require('react-native');\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Returns anonymous id or null if not set\n   */\n  async getAnonymousID(): Promise<?string> {\n    return await AppEventsLogger.getAnonymousID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set\n   */\n  async getAdvertiserID(): Promise<?string> {\n    return await AppEventsLogger.getAdvertiserID();\n  },\n\n  /**\n   * Returns advertiser id or null if not set.\n   * @platform android\n   */\n  async getAttributionID(): Promise<?string> {\n    if (Platform.OS === 'ios') {\n      return null;\n    }\n    return await AppEventsLogger.getAttributionID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}